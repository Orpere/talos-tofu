apiVersion: v1
kind: ServiceAccount
metadata:
  name: openbao-init
  namespace: openbao
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: openbao-init
  namespace: openbao
rules:
- apiGroups: [""]
  resources: ["pods", "secrets"]
  verbs: ["get", "list", "create", "update", "patch", "replace"]
- apiGroups: ["apps"]
  resources: ["statefulsets"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: openbao-init
  namespace: openbao
subjects:
- kind: ServiceAccount
  name: openbao-init
  namespace: openbao
roleRef:
  kind: Role
  name: openbao-init
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: openbao-init-unseal
  namespace: openbao
spec:
  template:
    metadata:
      name: openbao-init-unseal
    spec:
      serviceAccountName: openbao-init
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: wait-for-openbao
        image: busybox:1.35
        command: 
        - sh
        - -c
        - |
          echo "Waiting for OpenBao pods to be ready..."
          until wget -q --timeout=5 --tries=1 --spider http://openbao-0.openbao-internal:8200/v1/sys/health 2>/dev/null || 
                wget -q --timeout=5 --tries=1 --spider http://openbao-0.openbao-internal:8200 2>/dev/null; do
            echo "OpenBao not ready, waiting 10 seconds..."
            sleep 10
          done
          echo "OpenBao is accessible, proceeding..."
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
      containers:
      - name: openbao-init
        image: python:3.11-alpine
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        env:
        - name: FORCE_REINITIALIZE
          value: "true"
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          mkdir -p /tmp/.cache/pip /tmp/.local
          export PIP_CACHE_DIR=/tmp/.cache/pip
          export PYTHONUSERBASE=/tmp/.local
          export PATH=$PATH:/tmp/.local/bin
          
          pip install --user --disable-pip-version-check kubernetes requests
          
          echo "Starting OpenBao initialization script..."
          
          python << 'EOF'
          import os, time, base64, requests, json
          from kubernetes import client, config

          config.load_incluster_config()
          v1 = client.CoreV1Api()
          NS = "openbao"
          SECRET = "openbao-init-keys"

          def discover_pods():
              """Discover all OpenBao pods dynamically"""
              try:
                  pods = v1.list_namespaced_pod(NS, label_selector="app.kubernetes.io/name=openbao")
                  pod_names = [pod.metadata.name for pod in pods.items if pod.status.phase == "Running"]
                  pod_names.sort()
                  print(f"Discovered {len(pod_names)} OpenBao pods: {pod_names}")
                  return pod_names
              except Exception as e:
                  print(f"Error discovering pods: {e}")
                  return []

          def get_keys():
              try:
                  s = v1.read_namespaced_secret(SECRET, NS)
                  keys = []
                  for i in range(5):
                      key_name = f'unseal_key_{i}'
                      if key_name in s.data:
                          keys.append(base64.b64decode(s.data[key_name]).decode())
                  print(f"Retrieved {len(keys)} keys from secret")
                  return keys
              except Exception as e:
                  print(f"Could not get keys: {e}")
                  return None

          def store_keys(data):
              d = {}
              for i, key in enumerate(data['keys_base64']):
                  d[f'unseal_key_{i}'] = base64.b64encode(key.encode()).decode()
              d['root_token'] = base64.b64encode(data['root_token'].encode()).decode()
              
              sec = client.V1Secret(metadata=client.V1ObjectMeta(name=SECRET, namespace=NS), data=d)
              try:
                  v1.create_namespaced_secret(NS, sec)
                  print("Keys stored in secret successfully")
              except client.exceptions.ApiException as e:
                  if e.status == 409:
                      v1.replace_namespaced_secret(SECRET, NS, sec)
                      print("Keys updated in secret successfully")
                  else:
                      print(f"Error storing keys: {e}")

          def check_status(pod):
              try:
                  url = f"http://{pod}.openbao-internal:8200/v1/sys/seal-status"
                  r = requests.get(url, timeout=10)
                  if r.ok:
                      status = r.json()
                      print(f"{pod}: Init={status.get('initialized')}, Sealed={status.get('sealed')}, Progress={status.get('progress', 0)}/{status.get('t', 0)}")
                      return status
                  else:
                      print(f"{pod}: Not accessible - {r.status_code}")
                      return None
              except Exception as e:
                  print(f"{pod}: Connection failed - {e}")
                  return None

          def unseal_pod(pod, keys):
              status = check_status(pod)
              if not status:
                  print(f"{pod}: Cannot get status, skipping")
                  return False
              
              if not status.get('sealed', True):
                  print(f"{pod}: Already unsealed")
                  return True
              
              if not status.get('initialized', False):
                  print(f"{pod}: Not initialized, skipping unseal")
                  return False
              
              print(f"Unsealing {pod}...")
              url = f"http://{pod}.openbao-internal:8200/v1/sys/unseal"
              threshold = status.get('t', 3)
              
              for i, key in enumerate(keys[:threshold]):
                  try:
                      r = requests.post(url, json={'key': key}, timeout=15)
                      if r.ok:
                          response = r.json()
                          progress = response.get('progress', 0)
                          sealed = response.get('sealed', True)
                          print(f"{pod}: Key {i+1}/{threshold}, Progress: {progress}/{threshold}")
                          
                          if not sealed:
                              print(f"✓ {pod}: Unsealed successfully")
                              return True
                      else:
                          print(f"{pod}: Unseal failed - {r.status_code}")
                  except Exception as e:
                      print(f"{pod}: Error with key {i+1} - {e}")
              
              print(f"✗ {pod}: Failed to unseal")
              return False

          def join_raft(pod, leader_pod):
              if pod == leader_pod:
                  return True
              
              try:
                  status_url = f"http://{pod}.openbao-internal:8200/v1/sys/storage/raft/configuration"
                  r = requests.get(status_url, timeout=10)
                  if r.ok and r.json().get('data', {}).get('config', {}).get('servers'):
                      print(f"{pod}: Already in Raft cluster")
                      return True
              except:
                  pass
              
              print(f"Joining {pod} to Raft cluster...")
              url = f"http://{pod}.openbao-internal:8200/v1/sys/storage/raft/join"
              payload = {'leader_api_addr': f"http://{leader_pod}.openbao-internal:8200"}
              
              try:
                  r = requests.post(url, json=payload, timeout=15)
                  if r.ok:
                      print(f"✓ {pod}: Joined Raft cluster")
                      return True
                  else:
                      print(f"✗ {pod}: Failed to join - {r.status_code}")
                      return False
              except Exception as e:
                  print(f"✗ {pod}: Join error - {e}")
                  return False

          def initialize_openbao(leader_pod):
              try:
                  api_url = f"http://{leader_pod}.openbao-internal:8200/v1/sys"
                  
                  r = requests.get(f"{api_url}/init", timeout=10)
                  if r.ok and r.json().get('initialized', False):
                      print("OpenBao is already initialized")
                      return True
                  
                  print("Initializing OpenBao...")
                  resp = requests.post(f"{api_url}/init", 
                                     json={'secret_shares': 5, 'secret_threshold': 3}, 
                                     timeout=30)
                  if resp.ok:
                      init_data = resp.json()
                      store_keys(init_data)
                      print("✓ OpenBao initialized successfully")
                      return True
                  else:
                      print(f"✗ Initialization failed: {resp.status_code}")
                      if resp.status_code == 400:
                          print("This may indicate OpenBao is already initialized")
                          return True
                      return False
                      
              except Exception as e:
                  print(f"✗ Initialization error: {e}")
                  return False

          def main():
              print("=== OpenBao Auto-Unsealer ===")
              
              pods = discover_pods()
              if not pods:
                  print("No OpenBao pods found")
                  return
              
              leader_pod = pods[0]
              print(f"Using {leader_pod} as leader")
              
              print(f"Waiting for {leader_pod} to be accessible...")
              for attempt in range(30):
                  if check_status(leader_pod):
                      break
                  print(f"Attempt {attempt + 1}/30: {leader_pod} not ready, waiting...")
                  time.sleep(10)
              else:
                  print(f"Leader {leader_pod} never became accessible")
                  return
              
              if not initialize_openbao(leader_pod):
                  print("Failed to initialize OpenBao")
                  return
              
              keys = get_keys()
              if not keys:
                  print("No unseal keys available")
                  return
              
              print(f"Using {len(keys)} unseal keys")
              
              print(f"\n=== Unsealing Leader: {leader_pod} ===")
              if not unseal_pod(leader_pod, keys):
                  print("Failed to unseal leader, aborting")
                  return
              
              time.sleep(10)
              
              for pod in pods[1:]:
                  print(f"\n=== Processing: {pod} ===")
                  
                  if join_raft(pod, leader_pod):
                      time.sleep(5)
                      unseal_pod(pod, keys)
                  else:
                      print(f"Skipping {pod} due to Raft join failure")
                  
                  time.sleep(5)
              
              print("\n=== Final Status ===")
              for pod in pods:
                  check_status(pod)
              
              print("✓ OpenBao unsealing completed")

          if __name__ == "__main__":
              main()
          EOF